# Spring Boot API Development Rules and Standards

## Architecture Style
- **Layered Architecture**: Controller → Service → Repository → Entity
- **Package Structure**: 
  - `com.cursordemo.api.controller` - REST controllers
  - `com.cursordemo.api.service` - Business logic
  - `com.cursordemo.api.repository` - Data access layer
  - `com.cursordemo.api.entity` - JPA entities
  - `com.cursordemo.api.dto` - Data Transfer Objects
  - `com.cursordemo.api.exception` - Custom exceptions
  - `com.cursordemo.api.config` - Configuration classes
  - `com.cursordemo.api.security` - Security configuration

## Naming Conventions
- **Classes**: PascalCase (e.g., `BookController`, `BookService`)
- **Methods**: camelCase (e.g., `getBookById`, `createBook`)
- **Variables**: camelCase (e.g., `bookTitle`, `authorName`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `MAX_BOOKS_PER_PAGE`)
- **Packages**: lowercase (e.g., `com.cursordemo.api.controller`)
- **Database Tables**: lowercase with underscores (e.g., `book`, `book_author`)

## Technology Stack
- **Java Version**: 17
- **Spring Boot Version**: 3.2.0
- **Database**: H2 (in-memory for development)
- **Build Tool**: Maven
- **Authentication**: Basic Auth with Spring Security
- **Documentation**: Swagger/OpenAPI 3
- **Validation**: Bean Validation (JSR-303)
- **Testing**: JUnit 5 + Mockito

## Folder Structure
```
src/
├── main/
│   ├── java/
│   │   └── com/
│   │       └── cursordemo/
│   │           └── api/
│   │               ├── CursorDemoApplication.java
│   │               ├── controller/
│   │               ├── service/
│   │               ├── repository/
│   │               ├── entity/
│   │               ├── dto/
│   │               ├── exception/
│   │               ├── config/
│   │               └── security/
│   └── resources/
│       ├── application.yml
│       ├── data.sql
│       └── schema.sql
└── test/
    └── java/
        └── com/
            └── cursordemo/
                └── api/
                    ├── controller/
                    ├── service/
                    └── repository/
```

## Dependency Management Rules
- Use Maven for dependency management
- Specify exact versions in `pom.xml`
- Group dependencies logically (Spring Boot, Database, Security, Documentation, Testing)
- Use Spring Boot BOM for version management

## Error Handling Standards
- Create custom exceptions extending `RuntimeException`
- Implement global exception handler using `@ControllerAdvice`
- Return consistent error response format
- Use appropriate HTTP status codes
- Log errors with proper context

## Validation Rules
- Use Bean Validation annotations on DTOs
- Validate all input parameters
- Create custom validators when needed
- Return validation errors in consistent format

## Logging Standards
- Use SLF4J with Logback
- Log at appropriate levels (DEBUG, INFO, WARN, ERROR)
- Include correlation IDs for request tracing
- Log method entry/exit for debugging
- Avoid logging sensitive information

## Testing Strategy
- Unit tests for all service methods
- Integration tests for controllers
- Repository tests with test data
- Use `@SpringBootTest` for integration tests
- Mock external dependencies
- Achieve minimum 80% code coverage

## Documentation Approach
- Use Swagger/OpenAPI 3 annotations
- Document all REST endpoints
- Include request/response examples
- Document error codes and messages
- Keep README.md updated with setup instructions

## Code Quality Standards
- Follow SOLID principles
- Use meaningful variable and method names
- Keep methods small and focused
- Add comprehensive comments for complex logic
- Use consistent formatting
- Implement proper null checks
- Use Optional for nullable returns

## Security Standards
- Implement Basic Authentication
- Use HTTPS in production
- Validate all inputs
- Implement proper CORS configuration
- Use secure headers
- Log security events

## Performance Standards
- Use pagination for large datasets
- Implement caching where appropriate
- Optimize database queries
- Use connection pooling
- Monitor response times

## API Design Standards
- Use RESTful conventions
- Return appropriate HTTP status codes
- Use consistent response formats
- Implement proper versioning strategy
- Use meaningful endpoint names
- Support filtering, sorting, and pagination

## Phase 2 Implementation Status - COMPLETED ✅

### ✅ Implemented Features:
1. **Spring Boot Project Structure**: Complete layered architecture implemented
2. **Book Entity**: Created with all required attributes (title, author, isbn, price) + audit fields
3. **CRUD Operations**: Full Create, Read, Update, Delete functionality
4. **Search Capability**: Search by title, author, or both with case-insensitive matching
5. **Price Filtering**: Find books by price range, minimum, or maximum price
6. **Basic Authentication**: Spring Security with in-memory users (admin/admin123, user/user123)
7. **Input Validation**: Bean validation on all DTOs with custom error messages
8. **Global Exception Handling**: Custom exceptions and consistent error responses
9. **API Documentation**: Swagger/OpenAPI 3 with comprehensive endpoint documentation
10. **H2 In-Memory Database**: Configured with sample data (10 books)
11. **Unit Testing**: Comprehensive test coverage for service layer
12. **Git Integration**: Feature branch created and pushed to repository

### ✅ Technical Implementation:
- **Java 17**: Used throughout the application
- **Spring Boot 3.2.0**: Latest stable version
- **Maven**: Dependency management and build tool
- **H2 Database**: In-memory database with console access
- **Spring Security**: Basic authentication implementation
- **Spring Data JPA**: Repository pattern with custom queries
- **Swagger/OpenAPI**: Interactive API documentation
- **JUnit 5 + Mockito**: Testing framework
- **Logging**: SLF4J with proper log levels
- **Validation**: Bean validation with custom messages
- **Error Handling**: Global exception handler with consistent responses

### ✅ API Endpoints Implemented:
- `POST /api/v1/books` - Create book
- `GET /api/v1/books` - Get all books
- `GET /api/v1/books/{id}` - Get book by ID
- `GET /api/v1/books/isbn/{isbn}` - Get book by ISBN
- `PUT /api/v1/books/{id}` - Update book
- `DELETE /api/v1/books/{id}` - Delete book
- `GET /api/v1/books/search?keyword={keyword}` - Search books
- `GET /api/v1/books/search/title?title={title}` - Search by title
- `GET /api/v1/books/search/author?author={author}` - Search by author
- `GET /api/v1/books/price/max?maxPrice={price}` - Books with max price
- `GET /api/v1/books/price/min?minPrice={price}` - Books with min price
- `GET /api/v1/books/price/range?minPrice={min}&maxPrice={max}` - Books in price range

### ✅ Documentation & Tools:
- **Swagger UI**: Available at http://localhost:8080/swagger-ui.html
- **H2 Console**: Available at http://localhost:8080/h2-console
- **README.md**: Comprehensive documentation with examples
- **Sample Data**: 10 pre-loaded books for testing
- **Authentication**: Basic auth with admin/admin123 and user/user123

### ✅ Quality Assurance:
- **Code Coverage**: Unit tests for all service methods
- **Build Success**: Maven build completes successfully
- **Test Results**: All 14 tests pass
- **Code Quality**: Follows all defined coding standards
- **Documentation**: Complete API documentation with examples
